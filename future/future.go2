package main

import (
	"context"
	"fmt"
	"time"
)

// Future implements a version of the Future pattern. Future stores
// a future read-only value.
type Future(type T) struct {
	result T
	err    error
	ch     chan struct{}
}

// Get waits until the Future value is set finishes and returns the value
func (f *Future(T)) Get() T {
	<-f.ch
	return f.result
}

// Err waits until the Future is set and returns the error
func (f *Future(T)) Err() error {
	<-f.ch
	return f.err
}

// Done returns a channel that is closed when the Future is set with a value
// or error
func (f *Future(T)) Done() <-chan struct{} {
	return f.ch
}

// GeneratorFn generates a value
type GeneratorFn(type T) func(context.Context) (T, error)

// NewFuture creates a new Future with the specified value generator function.
// NewFuture starts the generator when called.
func NewFuture(type T)(ctx context.Context, worker GeneratorFn(T)) *Future(T) {

	future := Future(T){ch: make(chan struct{})}

	done := make(chan (Future(T)))
	
	go func() {
		var result Future(T)
		result.result, result.err = worker(ctx)
		done <- result
		close(done)
	}()
	
	go func() {
		defer close(future.ch)

		select {
		case <-ctx.Done():
			future.err = ctx.Err()
			
		case result := <-done:
			future.result = result.result
			future.err = result.err
		}
	}()
	
	return &future
}

func slowInt(ctx context.Context) (int, error) {
	time.Sleep(time.Second)
	return 1980, nil
}

func slowString(_ context.Context) (string, error) {
	time.Sleep(time.Second)
	return "bananas", nil
}

func main() {

	ctx := context.Background()

	//======= Get() =======
	fmt.Println("using Get()")
	futureInt := NewFuture(ctx, slowInt)
	fmt.Printf("result: %d error: %v\n", futureInt.Get(), futureInt.Err())
	fmt.Println()

	//======= Done() =======
	fmt.Println("Using <-Done()")
	futureStr := NewFuture(ctx, slowString)

	for finished := false; !finished; {
		select {
		case <-futureStr.Done():
			finished = true

		default:
		}
		time.Sleep(100 * time.Millisecond)
		fmt.Print(".")
	}
	fmt.Printf("result: \"%s\" error: %v\n", futureStr.Get(), futureStr.Err())
	fmt.Println()

	//======= Context timeout =======
	fmt.Println("Context timeout")

	ctx, cancel := context.WithTimeout(ctx, 500*time.Millisecond)
	defer cancel()

	futureInt = NewFuture(ctx, slowInt)
	futureStr = NewFuture(ctx, slowString)

	fmt.Printf("result: %d error: %v\n", futureInt.Get(), futureInt.Err())
	fmt.Printf("result: \"%s\" error: %v\n", futureStr.Get(), futureStr.Err())

}
